{"version":3,"file":"static/webpack/static/development/pages/spaces.js.5902c5f10dd73e9c8fee.hot-update.js","sources":["webpack:///./components/SpacesPage.js"],"sourcesContent":["import React, { useState } from \"react\";\nimport { connect } from 'react-redux'\n\nimport styled from 'styled-components';\nimport PageTemplate from \"./PageTemplate\"\n\n\nimport { Modal, Button, Form } from 'react-bootstrap'\nimport Link from 'next/link'\nimport { bindActionCreators } from \"redux\";\nimport { Spaces } from \"../components/spaces\";\n\n\nconst MEMBERSHIP_TYPE_TOKEN = 'token'\nconst MEMBERSHIP_TYPE_INVITE = 'invite'\n\nfunction renderMembershipType(membershipType) {\n    switch(membershipType){\n        case MEMBERSHIP_TYPE_TOKEN:\n            return <div>\n                Add ERC20 and ERC721 tokens:\n            </div>\n        case MEMBERSHIP_TYPE_INVITE:\n            return <div>\n                Add Ethereum addresses:\n            </div>\n        default:\n            return null\n    }\n}\n\nfunction Page({ }) {\n    const [showCreateSpaceModal, setShowCreateSpaceModal] = useState(true);\n    const [membershipType, setMembershipType] = useState('')\n\n    return <PageTemplate className=\"container\">\n        <h1>My spaces</h1>\n        <button className=\"btn btn-primary\" onClick={() => setShowCreateSpaceModal(true)}>Create space</button>\n        <Spaces/>\n\n        <Modal show={showCreateSpaceModal} onHide={() => setShowCreateSpaceModal(false)}>\n            <Modal.Header closeButton>\n                <Modal.Title>Create a space</Modal.Title>\n            </Modal.Header>\n            <Modal.Body>\n                <Form>\n                    <Form.Group controlId=\"exampleForm.ControlInput1\">\n                        <Form.Label><i class=\"fas fa-layer-group\"></i> Name</Form.Label>\n                        <Form.Control type=\"text\" placeholder=\"Indian Kebabs\" />\n                    </Form.Group>\n\n                    <Form.Group controlId=\"exampleForm.ControlInput1\">\n                        <Form.Label><i className='fa fa-user'/> How can people join?</Form.Label>\n                        \n                        <Button variant=\"outline-primary\" active={membershipType == MEMBERSHIP_TYPE_TOKEN} onClick={() => {\n                            setMembershipType(MEMBERSHIP_TYPE_TOKEN)\n                        }}>\n                        By token\n                        </Button>\n\n                        <Button variant=\"outline-secondary\" active={membershipType == MEMBERSHIP_TYPE_INVITE} onClick={() => {\n                            setMembershipType(MEMBERSHIP_TYPE_INVITE)\n                        }}>\n                        By invite\n                        </Button>\n                        \n                        \n                        {renderMembershipType(membershipType)}\n                        \n\n                        {/* Add Ethereum addresses:\n                        <Form.Control as=\"textarea\" rows=\"3\" />\n                        \n                        or--\n\n                        Membership by token\n                        <Form.Control as=\"textarea\" rows=\"3\" /> */}\n                        \n\n                        \n                    </Form.Group>\n                </Form>\n\n\n                \n\n\n            </Modal.Body>\n            <Modal.Footer>\n            <Button variant=\"secondary\" onClick={() => {\n                setShowCreateSpaceModal(false)\n            }}>\n                Close\n            </Button>\n            <Button variant=\"primary\" onClick={() => {\n                setShowCreateSpaceModal(false)\n            }}>\n                Save Changes\n            </Button>\n            </Modal.Footer>\n        </Modal>\n    </PageTemplate>\n}\n\nfunction mapStateToProps(state, props) {\n    return {\n        ...state.data\n    }\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return bindActionCreators(\n        {\n        },\n        dispatch\n    )\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Page)"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AAEA;AACA;AAGA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AAVA;AAYA;AACA;AACA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AACA;AACA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AAAA;AAAA;AACA;AACA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AA4BA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AAAA;AACA;AACA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAQA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AAKA;AACA;AACA;;;;A","sourceRoot":""}