{"ast":null,"code":"import _slicedToArray from \"@babel/runtime-corejs2/helpers/esm/slicedToArray\";\nimport _taggedTemplateLiteral from \"@babel/runtime-corejs2/helpers/esm/taggedTemplateLiteral\";\nvar _jsxFileName = \"/Users/liamz/Documents/open-source/everest/social/components/Search.js\";\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n    width: 600px;\\n    height: 40px;\\n    padding: 0.25em 0.5em;\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport React, { useState } from \"react\";\nimport { search } from \"../actions\";\nimport { connect } from 'react-redux';\nimport Router from 'next/router';\nimport styled from 'styled-components';\nvar SearchBox = styled.input(_templateObject());\n\nvar Search = function Search(_ref) {\n  var dispatch = _ref.dispatch;\n\n  var _useState = useState(),\n      _useState2 = _slicedToArray(_useState, 2),\n      searchQuery = _useState2[0],\n      setSearchQuery = _useState2[1];\n\n  function onKeyPress(event) {\n    if (event.key === 'Enter') {\n      // dispatch(search(searchQuery))\n      Router.push(\"/entry/\".concat(searchQuery));\n    }\n  }\n\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24\n    },\n    __self: this\n  }, React.createElement(SearchBox, {\n    type: \"text\",\n    placeholder: \"Enter a search term here\",\n    value: searchQuery,\n    onChange: function onChange(e) {\n      return setSearchQuery(e.target.value);\n    },\n    onKeyPress: onKeyPress,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25\n    },\n    __self: this\n  }));\n};\n\nfunction mapStateToProps(state, ownProps) {\n  return {// prefilledSearchQuery: state.entry.title || ''\n  };\n}\n\nfunction mapDispatchToProps(dispatch, ownProps) {\n  return {};\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Search);","map":{"version":3,"sources":["/Users/liamz/Documents/open-source/everest/social/components/Search.js"],"names":["React","useState","search","connect","Router","styled","SearchBox","input","Search","dispatch","searchQuery","setSearchQuery","onKeyPress","event","key","push","e","target","value","mapStateToProps","state","ownProps","mapDispatchToProps"],"mappings":";;;;;;;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SAASC,MAAT,QAAuB,YAAvB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,OAAOC,MAAP,MAAmB,aAAnB;AAEA,OAAOC,MAAP,MAAmB,mBAAnB;AACA,IAAMC,SAAS,GAAGD,MAAM,CAACE,KAAV,mBAAf;;AAOA,IAAMC,MAAM,GAAG,SAATA,MAAS,OAAkB;AAAA,MAAfC,QAAe,QAAfA,QAAe;;AAAA,kBACSR,QAAQ,EADjB;AAAA;AAAA,MACtBS,WADsB;AAAA,MACTC,cADS;;AAG7B,WAASC,UAAT,CAAoBC,KAApB,EAA2B;AACvB,QAAGA,KAAK,CAACC,GAAN,KAAc,OAAjB,EAA0B;AACtB;AACAV,MAAAA,MAAM,CAACW,IAAP,kBAAsBL,WAAtB;AACH;AACJ;;AAED,SAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACH,oBAAC,SAAD;AACI,IAAA,IAAI,EAAC,MADT;AACgB,IAAA,WAAW,EAAC,0BAD5B;AAEI,IAAA,KAAK,EAAEA,WAFX;AAGI,IAAA,QAAQ,EAAE,kBAAAM,CAAC;AAAA,aAAIL,cAAc,CAACK,CAAC,CAACC,MAAF,CAASC,KAAV,CAAlB;AAAA,KAHf;AAII,IAAA,UAAU,EAAEN,UAJhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADG,CAAP;AAQH,CAlBD;;AAoBA,SAASO,eAAT,CAAyBC,KAAzB,EAAgCC,QAAhC,EAA0C;AACtC,SAAO,CACH;AADG,GAAP;AAGH;;AAED,SAASC,kBAAT,CAA4Bb,QAA5B,EAAsCY,QAAtC,EAAgD;AAC5C,SAAO,EAAP;AACH;;AAED,eAAelB,OAAO,CAACgB,eAAD,EAAkBG,kBAAlB,CAAP,CAA6Cd,MAA7C,CAAf","sourcesContent":["import React, { useState } from \"react\";\nimport { search } from \"../actions\";\nimport { connect } from 'react-redux'\nimport Router from 'next/router'\n\nimport styled from 'styled-components';\nconst SearchBox = styled.input`\n    width: 600px;\n    height: 40px;\n    padding: 0.25em 0.5em;\n`\n\n\nconst Search = ({ dispatch }) => {\n    const [searchQuery, setSearchQuery] = useState()\n\n    function onKeyPress(event) {\n        if(event.key === 'Enter') {\n            // dispatch(search(searchQuery))\n            Router.push(`/entry/${searchQuery}`)\n        }\n    }\n\n    return <div>\n        <SearchBox \n            type='text' placeholder='Enter a search term here' \n            value={searchQuery} \n            onChange={e => setSearchQuery(e.target.value)}\n            onKeyPress={onKeyPress}\n        />\n    </div>\n}\n\nfunction mapStateToProps(state, ownProps) {\n    return {\n        // prefilledSearchQuery: state.entry.title || ''\n    }\n}\n\nfunction mapDispatchToProps(dispatch, ownProps) {\n    return {}\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Search)"]},"metadata":{},"sourceType":"module"}