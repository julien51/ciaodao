{"ast":null,"code":"import _slicedToArray from \"@babel/runtime-corejs2/helpers/esm/slicedToArray\";\nimport _objectSpread from \"@babel/runtime-corejs2/helpers/esm/objectSpread\";\nimport _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport _Object$values from \"@babel/runtime-corejs2/core-js/object/values\";\nimport { web3 } from '../web3';\nvar memberNft = new web3.eth.Contract(require('../chain/MemberNFT.json'), require('../chain/MemberNFT.js'));\nvar guac = new web3.eth.Contract(require('../chain/GUACToken.json'), require('../chain/GUACToken.js'));\nvar LOAD_USER = 'LOAD_USER';\nexport var LOAD_USER_PROGRESS = 'LOAD_USER_PROGRESS';\nexport var LOAD_USER_NOT_FOUND = 'LOAD_USER_NOT_FOUND';\nexport var LOAD_USER_COMPLETE = 'LOAD_USER_COMPLETE';\nexport var LOGIN_USER = 'LOGIN_USER';\n\nfunction tupleToArray(obj) {\n  return _Object$values(obj);\n}\n\nexport function loginUser(id) {\n  return (\n    /*#__PURE__*/\n    function () {\n      var _ref = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee(dispatch) {\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                dispatch({\n                  type: LOGIN_USER,\n                  id: id\n                });\n\n              case 1:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      return function (_x) {\n        return _ref.apply(this, arguments);\n      };\n    }()\n  );\n}\nexport function getUserInfo(_x2) {\n  return _getUserInfo.apply(this, arguments);\n}\n\nfunction _getUserInfo() {\n  _getUserInfo = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee7(id) {\n    var data, _tupleToArray, _tupleToArray2, username, reputation;\n\n    return _regeneratorRuntime.wrap(function _callee7$(_context7) {\n      while (1) {\n        switch (_context7.prev = _context7.next) {\n          case 0:\n            _context7.next = 2;\n            return memberNft.methods.getData(id).call();\n\n          case 2:\n            data = _context7.sent;\n            _tupleToArray = tupleToArray(data), _tupleToArray2 = _slicedToArray(_tupleToArray, 2), username = _tupleToArray2[0], reputation = _tupleToArray2[1];\n            reputation = reputation.toString();\n            return _context7.abrupt(\"return\", {\n              username: username,\n              reputation: reputation\n            });\n\n          case 6:\n          case \"end\":\n            return _context7.stop();\n        }\n      }\n    }, _callee7);\n  }));\n  return _getUserInfo.apply(this, arguments);\n}\n\nexport function loadUserInfo(id) {\n  return (\n    /*#__PURE__*/\n    function () {\n      var _ref2 = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee2(dispatch) {\n        var userInfo;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.next = 2;\n                return getUserInfo(id);\n\n              case 2:\n                userInfo = _context2.sent;\n                dispatch({\n                  type: LOAD_USER_COMPLETE,\n                  user: _objectSpread({\n                    id: id.toString()\n                  }, userInfo)\n                });\n\n              case 4:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }));\n\n      return function (_x3) {\n        return _ref2.apply(this, arguments);\n      };\n    }()\n  );\n}\nimport BN from 'bn.js';\nexport function loadUserForUsername(username) {\n  return (\n    /*#__PURE__*/\n    function () {\n      var _ref3 = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee3(dispatch) {\n        var userId;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                _context3.next = 2;\n                return memberNft.methods.usernames(username).call();\n\n              case 2:\n                userId = _context3.sent;\n\n                if (userId) {\n                  _context3.next = 5;\n                  break;\n                }\n\n                throw new Error('user not found');\n\n              case 5:\n                dispatch(loadUser(userId));\n\n              case 6:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3);\n      }));\n\n      return function (_x4) {\n        return _ref3.apply(this, arguments);\n      };\n    }()\n  );\n}\nexport function loadAccounts() {\n  return (\n    /*#__PURE__*/\n    function () {\n      var _ref4 = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee4(dispatch) {\n        var accounts, evs;\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                _context4.next = 2;\n                return web3.eth.getAccounts();\n\n              case 2:\n                accounts = _context4.sent;\n                _context4.next = 5;\n                return memberNft.getPastEvents('Transfer', {\n                  filter: {\n                    from: '0x' + '0'.repeat(40),\n                    to: accounts[0]\n                  },\n                  fromBlock: '0'\n                });\n\n              case 5:\n                evs = _context4.sent;\n                evs.map(function (ev) {\n                  var userId = ev.returnValues._tokenId;\n                  dispatch(loadUser(userId));\n                });\n\n              case 7:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4);\n      }));\n\n      return function (_x5) {\n        return _ref4.apply(this, arguments);\n      };\n    }()\n  );\n}\nexport function loadUser(id) {\n  return (\n    /*#__PURE__*/\n    function () {\n      var _ref5 = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee5(dispatch) {\n        var accounts, owner, evs, ev, block, userId, userInfo;\n        return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                dispatch({\n                  type: LOAD_USER_PROGRESS\n                });\n                _context5.next = 3;\n                return web3.eth.getAccounts();\n\n              case 3:\n                accounts = _context5.sent;\n                _context5.next = 6;\n                return memberNft.methods.ownerOf(id).call();\n\n              case 6:\n                owner = _context5.sent;\n                _context5.next = 9;\n                return memberNft.getPastEvents('Transfer', {\n                  filter: {\n                    from: '0x' + '0'.repeat(40),\n                    to: owner\n                  },\n                  fromBlock: '0'\n                });\n\n              case 9:\n                evs = _context5.sent;\n\n                if (!(evs.length == 0)) {\n                  _context5.next = 13;\n                  break;\n                }\n\n                dispatch({\n                  type: LOAD_USER_NOT_FOUND\n                });\n                return _context5.abrupt(\"return\");\n\n              case 13:\n                evs = evs.filter(function (ev) {\n                  return ev.returnValues._tokenId.toString() == id.toString();\n                });\n                ev = evs[0];\n                _context5.next = 17;\n                return web3.eth.getBlock(ev.blockHash);\n\n              case 17:\n                block = _context5.sent;\n                userId = ev.returnValues._tokenId;\n                _context5.next = 21;\n                return getUserInfo(userId);\n\n              case 21:\n                userInfo = _context5.sent;\n                dispatch({\n                  type: LOAD_USER_COMPLETE,\n                  user: _objectSpread({\n                    id: userId.toString()\n                  }, userInfo, {\n                    registered: block.timestamp,\n                    posts: [],\n                    votes: []\n                  })\n                }); // load all posts user has made\n                // load all votes user has made     \n\n              case 23:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5);\n      }));\n\n      return function (_x6) {\n        return _ref5.apply(this, arguments);\n      };\n    }()\n  );\n}\nexport function registerAccount(username) {\n  return (\n    /*#__PURE__*/\n    function () {\n      var _ref6 = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee6(dispatch) {\n        var accounts, from, depositAmount;\n        return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                _context6.next = 2;\n                return web3.eth.getAccounts();\n\n              case 2:\n                accounts = _context6.sent;\n                from = accounts[0];\n                _context6.next = 6;\n                return memberNft.methods.getMinimumDeposit().call();\n\n              case 6:\n                depositAmount = _context6.sent;\n                _context6.next = 9;\n                return memberNft.methods.join(username).send({\n                  from: from,\n                  value: '50000000000000000'\n                });\n\n              case 9:\n              case \"end\":\n                return _context6.stop();\n            }\n          }\n        }, _callee6);\n      }));\n\n      return function (_x7) {\n        return _ref6.apply(this, arguments);\n      };\n    }()\n  );\n}","map":{"version":3,"sources":["/Users/liamz/Documents/open-source/everest/social/actions/users.js"],"names":["web3","memberNft","eth","Contract","require","guac","LOAD_USER","LOAD_USER_PROGRESS","LOAD_USER_NOT_FOUND","LOAD_USER_COMPLETE","LOGIN_USER","tupleToArray","obj","loginUser","id","dispatch","type","getUserInfo","methods","getData","call","data","username","reputation","toString","loadUserInfo","userInfo","user","BN","loadUserForUsername","usernames","userId","Error","loadUser","loadAccounts","getAccounts","accounts","getPastEvents","filter","from","repeat","to","fromBlock","evs","map","ev","returnValues","_tokenId","ownerOf","owner","length","getBlock","blockHash","block","registered","timestamp","posts","votes","registerAccount","getMinimumDeposit","depositAmount","join","send","value"],"mappings":"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","sourcesContent":["import { web3 } from '../web3'\n\nconst memberNft = new web3.eth.Contract(\n    require('../chain/MemberNFT.json'),\n    require('../chain/MemberNFT.js')\n)\n\nconst guac = new web3.eth.Contract(\n    require('../chain/GUACToken.json'),\n    require('../chain/GUACToken.js')\n)\n\nconst LOAD_USER = 'LOAD_USER'\n\nexport const LOAD_USER_PROGRESS = 'LOAD_USER_PROGRESS'\nexport const LOAD_USER_NOT_FOUND = 'LOAD_USER_NOT_FOUND'\nexport const LOAD_USER_COMPLETE = 'LOAD_USER_COMPLETE'\n\nexport const LOGIN_USER = 'LOGIN_USER'\n\nfunction tupleToArray(obj) {\n    return Object.values(obj)\n}\n\nexport function loginUser(id) {\n    return async dispatch => {\n        dispatch({\n            type: LOGIN_USER,\n            id\n        })\n    }\n}\n\nexport async function getUserInfo(id) {\n    let data = await memberNft.methods.getData(id).call()\n    let [ username, reputation ] = tupleToArray(data)\n    reputation = reputation.toString()\n    return {\n        username,\n        reputation\n    }\n}\n\nexport function loadUserInfo(id) {\n    return async dispatch => {\n        const userInfo = await getUserInfo(id)\n        dispatch({\n            type: LOAD_USER_COMPLETE,\n            user: {\n                id: id.toString(),\n                ...userInfo\n            }\n        })\n    }\n}\n\nimport BN from 'bn.js'\n\nexport function loadUserForUsername(username) {\n    return async dispatch => {\n        let userId = await memberNft.methods.usernames(username).call()\n        if(!userId) throw new Error('user not found')\n        dispatch(loadUser(userId))\n    }\n}\n\nexport function loadAccounts() {\n    return async dispatch => {\n        const accounts = await web3.eth.getAccounts()\n        const evs = await memberNft.getPastEvents(\n            'Transfer', \n            {\n                filter: {\n                    from: '0x'+'0'.repeat(40),\n                    to: accounts[0]\n                },\n                fromBlock: '0'\n            }\n        )\n\n        evs.map(ev => {\n            const userId = ev.returnValues._tokenId\n            dispatch(loadUser(userId))\n        })\n    }\n}\n\nexport function loadUser(id) {\n    return async dispatch => {\n        dispatch({\n            type: LOAD_USER_PROGRESS\n        })\n\n        const accounts = await web3.eth.getAccounts()\n        const owner = await memberNft.methods.ownerOf(id).call()\n\n        let evs = await memberNft.getPastEvents(\n            'Transfer', \n            {\n                filter: {\n                    from: '0x'+'0'.repeat(40),\n                    to: owner\n                },\n                fromBlock: '0'\n            }\n        )\n        \n        if(evs.length == 0) {\n            dispatch({\n                type: LOAD_USER_NOT_FOUND\n            })\n            return\n        }\n\n\n        evs = evs.filter(ev => {\n            return ev.returnValues._tokenId.toString() == id.toString()\n        })\n        const ev = evs[0]\n\n        let block = await web3.eth.getBlock(ev.blockHash)\n        const userId = ev.returnValues._tokenId\n\n        let userInfo = await getUserInfo(userId)\n        \n\n        dispatch({\n            type: LOAD_USER_COMPLETE,\n            user: {\n                id: userId.toString(),\n                ...userInfo,\n                registered: block.timestamp,\n                posts: [],\n                votes: []\n            }\n        })\n\n        // load all posts user has made\n        // load all votes user has made     \n    }\n}\n\nexport function registerAccount(username) {\n    return async dispatch => {\n        const accounts = await web3.eth.getAccounts()\n        const from = accounts[0]\n\n\n        const depositAmount = await memberNft.methods.getMinimumDeposit().call()\n\n        await memberNft.methods.join(username).send({ from, value: '50000000000000000' })\n    }\n}"]},"metadata":{},"sourceType":"module"}