{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nexport var TX_UPDATE = 'TX_UPDATE';\nexport function trackTx(ev, txhash) {\n  return (\n    /*#__PURE__*/\n    function () {\n      var _ref = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee(dispatch) {\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                dispatch(txUpdate(txhash, {\n                  status: 'processing'\n                }));\n                ev.on('receipt', function (receipt) {\n                  dispatch(txUpdate(txhash, {\n                    status: 'received',\n                    receipt: receipt\n                  }));\n                });\n                ev.on('confirmation', function (confirmationNumber, receipt) {\n                  dispatch(txUpdate(txhash, {\n                    status: 'confirmed',\n                    confirmationNumber: confirmationNumber,\n                    receipt: receipt\n                  }));\n                });\n                ev.on('error', function (err) {\n                  dispatch(txUpdate(txhash, {\n                    status: 'error',\n                    err: err\n                  }));\n                });\n\n              case 4:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      return function (_x) {\n        return _ref.apply(this, arguments);\n      };\n    }()\n  );\n}\nexport function txUpdate(txhash, info) {\n  return {\n    type: TX_UPDATE,\n    txhash: txhash,\n    info: info\n  };\n}","map":{"version":3,"sources":["/Users/liamz/Documents/open-source/everest/social/actions/txs.js"],"names":["TX_UPDATE","trackTx","ev","txhash","dispatch","txUpdate","status","on","receipt","confirmationNumber","err","info","type"],"mappings":";;AAAA,OAAO,IAAMA,SAAS,GAAG,WAAlB;AAEP,OAAO,SAASC,OAAT,CAAiBC,EAAjB,EAAqBC,MAArB,EAA6B;AAChC;AAAA;AAAA;AAAA;AAAA;AAAA,+BAAO,iBAAMC,QAAN;AAAA;AAAA;AAAA;AAAA;AACHA,gBAAAA,QAAQ,CAACC,QAAQ,CAACF,MAAD,EAAS;AACtBG,kBAAAA,MAAM,EAAE;AADc,iBAAT,CAAT,CAAR;AAIAJ,gBAAAA,EAAE,CAACK,EAAH,CAAM,SAAN,EAAiB,UAAAC,OAAO,EAAI;AACxBJ,kBAAAA,QAAQ,CACJC,QAAQ,CAACF,MAAD,EAAS;AACbG,oBAAAA,MAAM,EAAE,UADK;AAEbE,oBAAAA,OAAO,EAAPA;AAFa,mBAAT,CADJ,CAAR;AAMH,iBAPD;AAQAN,gBAAAA,EAAE,CAACK,EAAH,CAAM,cAAN,EAAsB,UAACE,kBAAD,EAAqBD,OAArB,EAAiC;AACnDJ,kBAAAA,QAAQ,CACJC,QAAQ,CAACF,MAAD,EAAS;AACbG,oBAAAA,MAAM,EAAE,WADK;AAEbG,oBAAAA,kBAAkB,EAAlBA,kBAFa;AAGbD,oBAAAA,OAAO,EAAPA;AAHa,mBAAT,CADJ,CAAR;AAOH,iBARD;AASAN,gBAAAA,EAAE,CAACK,EAAH,CAAM,OAAN,EAAe,UAAAG,GAAG,EAAI;AAClBN,kBAAAA,QAAQ,CAACC,QAAQ,CAACF,MAAD,EAAS;AACtBG,oBAAAA,MAAM,EAAE,OADc;AAEtBI,oBAAAA,GAAG,EAAHA;AAFsB,mBAAT,CAAT,CAAR;AAIH,iBALD;;AAtBG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAP;;AAAA;AAAA;AAAA;AAAA;AAAA;AA6BH;AAED,OAAO,SAASL,QAAT,CAAkBF,MAAlB,EAA0BQ,IAA1B,EAAgC;AACnC,SAAO;AACHC,IAAAA,IAAI,EAAEZ,SADH;AAEHG,IAAAA,MAAM,EAANA,MAFG;AAGHQ,IAAAA,IAAI,EAAJA;AAHG,GAAP;AAKH","sourcesContent":["export const TX_UPDATE = 'TX_UPDATE'\n\nexport function trackTx(ev, txhash) {\n    return async dispatch => {\n        dispatch(txUpdate(txhash, {\n            status: 'processing',\n        }))\n\n        ev.on('receipt', receipt => {\n            dispatch(\n                txUpdate(txhash, {\n                    status: 'received',\n                    receipt,\n                })\n            )\n        })\n        ev.on('confirmation', (confirmationNumber, receipt) => {\n            dispatch(\n                txUpdate(txhash, {\n                    status: 'confirmed',\n                    confirmationNumber,\n                    receipt,\n                })\n            )\n        })\n        ev.on('error', err => {\n            dispatch(txUpdate(txhash, {\n                status: 'error',\n                err\n            }))\n        })\n    }\n}\n\nexport function txUpdate(txhash, info) {\n    return {\n        type: TX_UPDATE,\n        txhash,\n        info\n    }\n}"]},"metadata":{},"sourceType":"module"}